
	/* 
	//color attribute
	glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(3 * sizeof(float)));
	glEnableVertexAttribArray(1);
	// texture coord attribute
	glVertexAttribPointer(2, 2, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(6 * sizeof(float)));
	glEnableVertexAttribArray(2);
	*/

	//Texture
	//---------------------------------------------------------------------------
	//Create texture object and assign it an id.
	/*unsigned int texture1, texture2;
	glGenTextures(1, &texture1);
	glBindTexture(GL_TEXTURE_2D, texture1);

	/* Set the textures to the coordinate axis (s, t (r if it is 3d))
	 * First argument represents 2D textures,
	 * The second is which option we want to set and for which axis,
	 * The third is the texture wrapping mode. */
	/*
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
	*/
	//Uses sbi_image.h to load a texture.
	/*
	int width, height, nrChannels;
	stbi_set_flip_vertically_on_load(true);
	unsigned char *data = stbi_load("resources/texture/container.jpg", &width, &height, &nrChannels, 0);

	if (data)
	{
		//Generate a texture based on our stbi_load call.
		glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, width, height, 0, GL_RGB, GL_UNSIGNED_BYTE, data);

		//By generating a mipmap our texture can scale with ease.
		glGenerateMipmap(GL_TEXTURE_2D);
	}
	else
	{
		std::cout << "Failed to load crate texture" << std::endl;
		exit(1);
	}
	//Free the image after the texture has been generated.
	stbi_image_free(data);

	//Texture 2
	glGenTextures(1, &texture2);
	glBindTexture(GL_TEXTURE_2D, texture2);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
	data = stbi_load("resources/texture/awesomeface.jpg", &width, &height, &nrChannels, 0);
	if (data)
	{
		//Generate a texture based on our stbi_load call.
		glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, width, height, 0, GL_RGBA, GL_UNSIGNED_BYTE, data);

		//By generating a mipmap our texture can scale with ease.
		glGenerateMipmap(GL_TEXTURE_2D);
	}
	else
	{
		std::cout << "Failed to load face texture" << std::endl;
		exit(1);
	}
	stbi_image_free(data);

	//openGL needs to know which sampler each texture unit belongs to
	ourShader.use();
	//setting it manually:
	glUniform1i(glGetUniformLocation(ourShader.ID, "texture1"), 0);
	//using texture class:
	ourShader.setInt("texture2", 1);
	*/
